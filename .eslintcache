[{"Q:\\react\\digg-weather\\src\\index.js":"1","Q:\\react\\digg-weather\\src\\App.js":"2","Q:\\react\\digg-weather\\src\\reportWebVitals.js":"3","Q:\\react\\digg-weather\\src\\js\\header.js":"4","Q:\\react\\digg-weather\\src\\js\\weather.js":"5","Q:\\react\\digg-weather\\src\\js\\footer.js":"6","Q:\\react\\digg-weather\\src\\js\\location.js":"7","Q:\\react\\digg-weather\\src\\js\\keys.js":"8"},{"size":500,"mtime":1609088742178,"results":"9","hashOfConfig":"10"},{"size":9884,"mtime":1610997395481,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1609088742178,"results":"12","hashOfConfig":"10"},{"size":932,"mtime":1610798505772,"results":"13","hashOfConfig":"10"},{"size":186,"mtime":1610989415371,"results":"14","hashOfConfig":"10"},{"size":144,"mtime":1610648383888,"results":"15","hashOfConfig":"10"},{"size":6020,"mtime":1611002967530,"results":"16","hashOfConfig":"10"},{"size":265,"mtime":1610718665036,"results":"17","hashOfConfig":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"j0gtiv",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hcao2f","Q:\\react\\digg-weather\\src\\index.js",[],["37","38"],"Q:\\react\\digg-weather\\src\\App.js",[],"Q:\\react\\digg-weather\\src\\reportWebVitals.js",[],"Q:\\react\\digg-weather\\src\\js\\header.js",[],"Q:\\react\\digg-weather\\src\\js\\weather.js",[],"Q:\\react\\digg-weather\\src\\js\\footer.js",[],"Q:\\react\\digg-weather\\src\\js\\location.js",["39"],"import { useState } from \"react\";\r\nimport { WiHumidity, WiStrongWind } from \"react-icons/wi\";\r\nimport { BiSearchAlt2 } from \"react-icons/bi\";\r\nimport { GoLocation } from \"react-icons/go\";\r\n\r\nconst Forecast = () => {\r\n  const [county, setCounty] = useState([]);\r\n  const [municipality, setMunicipality] = useState([]);\r\n  const [error, setError] = useState();\r\n  const [lat, setLat] = useState(\"\");\r\n  const [long, setLong] = useState(\"\");\r\n  const [temp, setTemp] = useState(\"\");\r\n  const [wind, setWind] = useState(\"\");\r\n  const [humidity, setHumidity] = useState(\"\");\r\n  const [showResults, setShowResults] = useState(false);\r\n\r\n  const url = \"https://api.opencagedata.com/geocode/v1/json?q=\";\r\n  const smhiUrl =\r\n    \"https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/\";\r\n  const key = \"527961ee26f54468a0a374c839e9565d\";\r\n\r\n  const handleSuccess = (pos) => {\r\n    const { latitude, longitude } = pos.coords;\r\n\r\n    const lat = parseFloat(latitude).toFixed(4);\r\n    const long = parseFloat(longitude).toFixed(4);\r\n\r\n    setLat(lat);\r\n    setLong(long);\r\n\r\n    console.log(\"Latitude is :\", lat);\r\n    console.log(\"Longitude is :\", long);\r\n\r\n    fetch(`${url}${lat}+${long}&key=${key}`)\r\n      .then((response) => {\r\n        console.log(response);\r\n        return response.json();\r\n      })\r\n      .then((result) => {\r\n        console.log(result);\r\n        const county = result.results[0].components.county;\r\n        const municipality = result.results[0].components.municipality;\r\n        setCounty(county);\r\n        setMunicipality(municipality);\r\n      });\r\n    fetch(`${smhiUrl}lon/${long}/lat/${lat}/data.json`)\r\n      .then((response) => {\r\n        console.log(response);\r\n        return response.json();\r\n      })\r\n      .then((result) => {\r\n        console.log(result);\r\n        const temp = Math.round(result.timeSeries[0].parameters[11].values[0]);\r\n        const wind = result.timeSeries[0].parameters[14].values[0];\r\n        const humidity = result.timeSeries[0].parameters[15].values[0];\r\n\r\n        setTemp(temp);\r\n        setWind(wind);\r\n        setHumidity(humidity);\r\n        console.log(temp);\r\n        console.log(wind);\r\n        console.log(humidity);\r\n      });\r\n  };\r\n\r\n  const handleError = (error) => {\r\n    setError(error.message);\r\n    console.log(error.message)\r\n  };\r\n\r\n  const getGeo = () => {\r\n    const { geolocation } = navigator;\r\n    const options = {\r\n      enableHighAccuracy: true,\r\n      timeout: 1000 * 60 * 1,\r\n      maximumAge: 0,\r\n    };\r\n\r\n    if (!geolocation) {\r\n      setError(\"Geolocation is not supported.\");\r\n      return;\r\n    }\r\n    geolocation.getCurrentPosition(handleSuccess, handleError, options);\r\n  };\r\n\r\n  const search = (e) => {\r\n    if (!lat && !long ){\r\n      setShowResults(true);\r\n      console.log(\"Coordinates is empty\")\r\n      setCounty('No coordinates given');\r\n    } else {\r\n      setShowResults(true);\r\n      fetch(`${url}${lat}+${long}&key=${key}`)\r\n        .then((response) => {\r\n          console.log(response);\r\n          return response.json();\r\n        })\r\n        .then((result) => {\r\n          console.log(result);\r\n          const county = result.results[0].components.county;\r\n          const municipality = result.results[0].components.municipality;\r\n          setCounty(county);\r\n          setMunicipality(municipality);\r\n        });\r\n  \r\n      fetch(`${smhiUrl}lon/${long}/lat/${lat}/data.json`)\r\n        .then((response) => {\r\n          console.log(response);\r\n          return response.json();\r\n        })\r\n        .then((result) => {\r\n          console.log(result);\r\n          const temp = Math.round(result.timeSeries[0].parameters[11].values[0]);\r\n          const wind = result.timeSeries[0].parameters[14].values[0];\r\n          const humidity = result.timeSeries[0].parameters[15].values[0];\r\n  \r\n          setTemp(temp);\r\n          setWind(wind);\r\n          setHumidity(humidity);\r\n          console.log(temp);\r\n          console.log(wind);\r\n          console.log(humidity);\r\n        });\r\n    }\r\n   \r\n  };\r\n\r\n  const getCurrent = () => {\r\n    setShowResults(true);\r\n    getGeo();\r\n  };\r\n\r\n  /* useEffect(() => {\r\n    getStandart();\r\n  }); */\r\n\r\n  return (\r\n    <div className=\"main-container\">\r\n      <div className=\"search-section\">\r\n        <div className=\"search-coordinates\">\r\n          <span>Search your coordinates :</span>\r\n          <input\r\n            type=\"text\"\r\n            className=\"search\"\r\n            placeholder=\"Set your latitude\"\r\n            value={lat}\r\n            onChange={(e) => setLat(e.target.value)}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            className=\"search\"\r\n            placeholder=\"Set your longitude\"\r\n            value={long}\r\n            onChange={(e) => setLong(e.target.value)}\r\n          />\r\n          <BiSearchAlt2 className=\"search-button\" onClick={() => search()} />\r\n        </div>\r\n        <div className=\"current-location\">\r\n          <span>Get current location :</span>\r\n          <GoLocation className=\"target\" onClick={() => getCurrent()} />\r\n        </div>\r\n      </div>\r\n      {showResults ? (\r\n        <div className=\"weather-section\">\r\n          <div className=\"weather\">\r\n            <div className=\"location\">\r\n              <h2>{county}</h2>\r\n              <h3>{municipality}</h3>\r\n            </div>\r\n            <div className=\"options\">\r\n              <div className=\"temp\">\r\n                <span>{temp}</span>\r\n                <span className=\"c\">Â°C</span>\r\n              </div>\r\n              <div className=\"wi-hu\">\r\n                <div className=\"windspeed\">\r\n                  <WiStrongWind className=\"react-icons\" />\r\n                  <span> {wind} m/s</span>\r\n                </div>\r\n                <div className=\"humidity\">\r\n                  <WiHumidity className=\"react-icons\" />\r\n                  <span>{humidity}%</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forecast;\r\n","Q:\\react\\digg-weather\\src\\js\\keys.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":9,"column":10,"nodeType":"46","messageId":"47","endLine":9,"endColumn":15},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]